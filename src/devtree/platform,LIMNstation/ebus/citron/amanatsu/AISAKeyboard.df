#include "<df>/dragonfruit.h"
#include "<inc>/a3x.h"

var AKeyboardDev 0
var AKeyboardCount 0

const AKeyboardMID 0x8FC48FC4

fn AKeyboardInit { -- }
	DeviceNew
		"kbd" DSetName
		DevCurrent@ AKeyboardDev!
	DeviceExit

	auto i
	1 i!

	while (i@ 16 <)
		auto rs
		InterruptDisable rs!

		if (i@ AmanatsuPoll AKeyboardMID ==)
			auto hmm
			5 Calloc hmm!

			AKeyboardDev@ DeviceSelectNode
				DeviceNew
					AKeyboardCount@ hmm@ itoa

					hmm@ DSetName

					i@ "amanatsu,unit" DAddProperty
					
					"dvorak" "layout" DAddProperty

					pointerof AKeyboardReadM "read" DAddMethod

					pointerof AKeyboardReadScanM "readScan" DAddMethod

					pointerof AKeyboardIsDownM "isDown" DAddMethod

					pointerof AKeyboardWaitKeyM "waitKey" DAddMethod

					"keyboard" "deviceType" DAddProperty

					"AISA,keyboard" "model" DAddProperty

					2 "revision" DAddProperty

					i@ 48 + "interrupt#" DAddProperty

					1 AKeyboardCount +=
				DeviceExit
			DeviceExit
		end

		rs@ InterruptRestore

		1 i +=
	end
end

fn private AKeyboardWaitKeyM { argvt argcn -- out1 out2 out3 }
	argvt@ 8 + @
	argvt@ 4 + @
	argvt@ @
	AKeyboardWaitKey out1!
end

fn AKeyboardWaitKey { cancelkey waitkey timeout -- pressed }
	0 pressed!

	auto cn
	"/clock" DevTreeWalk cn!

	auto ticks
	timeout@ 100 / 1 max ticks!

	if (cn@ 0 ~=)
		auto i
		0 i!

		while (i@ ticks@ <)
			if (cancelkey@ AKeyboardIsDown)
				0 pressed!
				return
			end

			if (waitkey@ AKeyboardIsDown)
				1 pressed!
				return
			end

			cn@ DeviceSelectNode
				100 "wait" DCallMethod drop drop drop drop
			DeviceExit

			1 i +=
		end
	end
end

fn AKeyboardPopCode { id -- code }
	auto rs
	InterruptDisable rs!

	id@ AmanatsuSelectDev
	1 AmanatsuCommand
	AmanatsuReadA code!

	rs@ InterruptRestore
end

fn private AKeyboardIsDownM { argvt argcn -- out1 out2 out3 }
	argvt@ @
	AKeyboardIsDown out1!
end

fn AKeyboardIsDown { scancode -- down }
	auto id
	"amanatsu,unit" DGetProperty id!

	auto rs
	InterruptDisable rs!

	id@ AmanatsuSelectDev
	scancode@ AmanatsuWriteA
	3 AmanatsuCommand
	AmanatsuReadA down!

	if (down@)
		while (id@ AKeyboardPopCode 0xFFFF ~=) end
	end

	rs@ InterruptRestore
end

fn private AKeyboardReadM { argvt argcn -- out1 out2 out3 }
	AKeyboardRead out1!
end

var Shift 0
var Ctrl 0

fn AKeyboardRead { -- c }
	auto id
	"amanatsu,unit" DGetProperty id!

	auto code
	id@ AKeyboardPopCode code!

	ERR c!

	if (code@ 0xFFFF ==)
		return
	end

	if (code@ 80 ==)
		1 Ctrl!
		return
	elseif (code@ 82 ==)
		1 Shift!
		return
	elseif (code@ 32848 ==)
		0 Ctrl!
		return
	elseif (code@ 32850 ==)
		0 Shift!
		return
	end

	if (code@ 80 >=)
		return
	end

	auto layout
	"layout" DGetProperty layout!
	
	auto i
	0 i!
	while (i@ AKeyboardLayouts@ <)
		if ([i@ 2 *]AKeyboardLayout@ layout@ strcmp)
			auto layoutptr
			[i@ 2 * 1 +]AKeyboardLayout@ layoutptr!
			
			if (Shift@)
				layoutptr@ AKeyboardShiftOffset@ code@ + 4 * + @ c!
			else
				layoutptr@ code@ 4 * + c!
			end
		end
	end
end

fn private AKeyboardReadScanM { argvt argcn -- out1 out2 out3 }
	AKeyboardReadScan out1!
end

fn AKeyboardReadScan { -- scan }
	auto id
	"amanatsu,unit" DGetProperty id!

	id@ AKeyboardPopCode scan!

	if (scan@ 0xFFFF ==)
		ERR scan!
		return
	end
end

(* keyboard layouts *)

const AKeyboardShiftOffset 52

table AQwertyKeyboardLayout
	'a'
	'b' 'c' 'd'
	'e' 'f' 'g'
	'h' 'i' 'j'
	'k' 'l' 'm'
	'n' 'o' 'p'
	'q' 'r' 's'
	't' 'u' 'v'
	'w' 'x' 'y'
	'z'
	'0' '1' '2'
	'3' '4' '5'
	'6' '7' '8'
	'9'
	';'
	' '
	' '
	'-'
	'='
	'['
	']'
	'\\'
	0
	'/'
	'.'
	'\''
	','
	'`'
	'\n'
	'\b'
	'A'
	'B' 'C' 'D'
	'E' 'F' 'G'
	'H' 'I' 'J'
	'K' 'L' 'M'
	'N' 'O' 'P'
	'Q' 'R' 'S'
	'T' 'U' 'V'
	'W' 'X' 'Y'
	'Z'
	')' '!' '@'
	'#' '$' '%'
	'^' '&' '*'
	'('
	':'
	' '
	' '
	'_'
	'+'
	'{'
	'}'
	'|'
	0
	'?'
	'>'
	'"'
	'<'
	'~'
	'\n'
	'\b'
endtable

table ADvorakKeyboardLayout
	'a'
	'x' 'j' 'e'
	'.' 'u' 'i'
	'd' 'c' 'h'
	't' 'n' 'm'
	'b' 'r' 'l'
	'\'' 'p' 'o'
	'y' 'g' 'k'
	',' 'q' 'f'
	';'
	'0' '1' '2'
	'3' '4' '5'
	'6' '7' '8'
	'9'
	's'
	' '
	' '
	'['
	']'
	'/'
	'='
	'\\'
	0
	'z'
	'v'
	'-'
	'w'
	'`'
	'\n'
	'\b'
	'A'
	'X' 'J' 'E'
	'>' 'U' 'I'
	'D' 'C' 'H'
	'T' 'N' 'M'
	'b' 'r' 'l'
	'"' 'P' 'O'
	'Y' 'G' 'K'
	'<' 'Q' 'F'
	':'
	')' '!' '@'
	'#' '$' '%'
	'^' '&' '*'
	'('
	'S'
	' '
	' '
	'{'
	'}'
	'?'
	'}'
	'|'
	0
	'Z'
	'V'
	'_'
	'W'
	'~'
	'\n'
	'\b'
endtable

const AKeyboardLayouts 2

table AKeyboardLayout
	"qwerty"
	pointerof AQwertyKeyboardLayout
	"dvorak"
	pointerof ADvorakKeyboardLayout
endtable